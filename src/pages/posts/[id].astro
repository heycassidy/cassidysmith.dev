---
import { css } from '@styled-system/css'
import { prose } from '@styled-system/patterns'
import blogPostLayout from '@recipes/blogPostLayout'
import { render, getCollection, type CollectionEntry } from 'astro:content'
import { entryIsPublished } from '@utils/index'
import AppLayout from '@layouts/AppLayout.astro'
import PrimaryLayout from '@layouts/PrimaryLayout.astro'
import UnorderedList from '@components/mdx/UnorderedList.astro'
import OrderedList from '@components/mdx/OrderedList.astro'
import Code from '@components/mdx/Code.astro'
import A from '@components/mdx/A.astro'
import PostHeader from '@components/blog/PostHeader.astro'
import PostMeta from '@components/blog/PostMeta.astro'
import TableOfContents from '@components/blog/TableOfContents.astro'
import H1 from '@components/mdx/H1.astro'
import H2 from '@components/mdx/H2.astro'
import H3 from '@components/mdx/H3.astro'
import H4 from '@components/mdx/H4.astro'
import H5 from '@components/mdx/H5.astro'
import H6 from '@components/mdx/H6.astro'
import SEOTags from '@components/SEOTags.astro'

interface Props {
  post: CollectionEntry<'blog'>
}

const { post } = Astro.props
const { Content, remarkPluginFrontmatter, headings } = await render(post)

const components = {
  ul: UnorderedList,
  ol: OrderedList,
  code: Code,
  h1: H1,
  h2: H2,
  h3: H3,
  h4: H4,
  h5: H5,
  h6: H6,
  a: A,
}

const layoutClasses = blogPostLayout()

export async function getStaticPaths() {
  const entries = await getCollection('blog', entryIsPublished)

  return entries.map((entry: CollectionEntry<'blog'>) => ({
    params: { id: entry.id },
    props: { post: entry },
  }))
}
---

<AppLayout>
  <SEOTags
    slot="head"
    title={post.data.title}
    description={post.data.subtitle}
  />

  <PrimaryLayout>
    <article
      class={css({
        display: 'grid',
        rowGap: 'columnRule',
        backgroundColor: 'columnRule',
        padding: 'columnRule',
      })}
    >
      <header
        class:list={[
          layoutClasses.root,
          css({
            paddingBlockStart: 'calc({spacing.bento.padding} * 2)',
            paddingBlockEnd: 'calc({spacing.bento.padding} * 3)',
            borderRadius: 'bento',

            _light: {
              color: 'pink.775',
              backgroundColor: 'pink.50',
            },

            _dark: {
              color: 'pink.400',
              backgroundColor: 'pink.850',
            },
          }),
        ]}
      >
        <PostHeader post={post} />
      </header>

      <main class:list={[layoutClasses.root, css({
        borderRadius: "bento",
        paddingBlock: 'calc({spacing.bento.padding} * 2)',
        _light: {
          backgroundColor: 'neutral.25'
        },
        _dark: {
          backgroundColor: 'neutral.875'
        }
      })]}>
        <div
          class:list={[
            layoutClasses.aside,
            css({
              zIndex: 1,
              md: {
                gridRow: 1,
                height: 0,
              },
            }),
          ]}
        >
          <PostMeta
            slot="sidebar"
            post={post}
            readingTime={remarkPluginFrontmatter.readingTime}
          />
          <TableOfContents slot="sidebar" headings={headings} />
        </div>

        <div
          class:list={[
            layoutClasses.root,
            layoutClasses.fullWidth,
            prose(),
            css({
              md: { gridRow: 1 },
            }),
          ]}
        >
          <Content components={components} />
        </div>
      </main>
    </article>
  </PrimaryLayout>
</AppLayout>
