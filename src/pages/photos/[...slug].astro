---
import { getCollection } from 'astro:content';
import AppLayout from '../../layouts/AppLayout.astro';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components'
import Button from '../../components/Button.astro';

export async function getStaticPaths() {
  const entries = await getCollection('photos', (entry) => !entry.data.draft);

  return entries.map(entry => ({
    params: { slug: entry.slug }, props: { photo: entry },
  }));
}

const photos = await getCollection('photos', (entry) => !entry.data.draft);
let sortedPhotoSlugs = photos.sort((a, b) => a.data.sortOrder - b.data.sortOrder ).map((photo) => photo.slug);

const { photo } = Astro.props;
const { Content } = await photo.render();

const aspectRatio = photo.data.image.src.width / photo.data.image.src.height;
const orientation = aspectRatio > 1 ? 'landscape' : 'portrait';
const previousPhotoSlug = sortedPhotoSlugs[(sortedPhotoSlugs.indexOf(photo.slug) - 1 + sortedPhotoSlugs.length) % sortedPhotoSlugs.length];
const nextPhotoSlug = sortedPhotoSlugs[(sortedPhotoSlugs.indexOf(photo.slug) + 1) % sortedPhotoSlugs.length];

---

<AppLayout
  title=`Photo: ${photo.data.title}``
  description=`A detailed view of a photo from my photography collection, this one titled ${photo.data.title}`
>
  <div class="photo-page-layout">
    <div class="photo-page-layout__image">
      <div class=`image-container image-container--${orientation}` >
        <Image
          transition:name={`photo-${photo.id}`}
          src={photo.data.image.src}
          alt={photo.data.image.description}
          width="700"
          quality={70}
          widths={[400, 800, (orientation === "landscape" ? 920 * 2 : 800 * 2)]} />
      </div>
    </div>
    <div class="photo-page-layout__description-and-controls">
      <div class="photo-controls">
        <Button class="photo-controls-button" as="a" size="small" href="/photos">
          <Icon name="ion:grid-sharp" /> All photos
        </Button>
        <div class="photo-controls-nav">
          {previousPhotoSlug && <Button class="photo-controls-button" as="a" size="small" href={`/photos/${previousPhotoSlug}`}><Icon name="ion:arrow-back-sharp" /> Previous</Button>}
          {nextPhotoSlug && <Button class="photo-controls-button" as="a" size="small" href={`/photos/${nextPhotoSlug}`}>Next <Icon name="ion:arrow-forward-sharp" /></Button>}
        </div>
      </div>
  
      <div class="photo-description">
        <h1>{photo.data.title}</h1>
        <Content class="photo-content" />
      </div>
    </div>
  </div>
</AppLayout>


<style lang="scss" define:vars={{ 'aspect-ratio': aspectRatio }}>
  @import '../../styles/mixins.scss';


  .photo-page-layout {
    display: grid;
    width: 100%;
    height: 100%;
    grid-template-rows: auto 1fr;
    
    @media (min-aspect-ratio: 1) {
      align-items: stretch;
      grid-template-rows: 1fr;
      grid-template-columns: 1fr 1fr;
    }
  }

  :global(:root[data-theme='light']) {
    .photo-page-layout__image {
      --photo-padding: var(--fluid-bento-padding);
    }
  }
  :global(:root[data-theme='dark']) {
    .photo-page-layout__image {
      --photo-padding: calc(var(--fluid-bento-padding) * 2);
    }
  }

  .photo-page-layout__image {
    background: var(--color-stark-background);
    padding: var(--photo-padding);
    display: flex;
    align-items: center;
    @media (min-aspect-ratio: 1) {
      max-height: 100dvh;
      justify-content: flex-end;
    }
  }
  .photo-page-layout__description-and-controls {
    padding: var(--fluid-bento-padding);
    display: grid;
    gap: var(--fluid-bento-gap);
    grid-template-rows: auto 1fr;
    @media (min-aspect-ratio: 1) {
      align-items: center;
    }
  }

  .photo-controls {
    width: 100%;
    display: flex;
    gap: var(--space-2);
  }
  .photo-controls-nav {
    display: flex;
    gap: var(--space-2);
    margin-left: auto;
  }

  .image-container {
    position: relative;
    background-color: var(--color-base-background);
    width: 100%;
    height: auto;
    border-radius: var(--radius-tiny);
    overflow: hidden;

    aspect-ratio: var(--aspect-ratio);
    
    // Screen aspect ratio
    @media (min-aspect-ratio: 1) {

      // Image aspect ratio
      &--portrait {
        max-height: 100%;
        width: auto;
      }
    }
    
    img {
      display: block;
      width: 100%;
      height: auto;
    }
  }

  .photo-description {
    width: 100%;
    @media (min-aspect-ratio: 1) {
      max-width: var(--space-content-3);
      justify-self: center;
    }

    :global(a) {
      @include text-link;
    }
  }

  .photo-controls-button {
    text-wrap: nowrap;
  }
</style>