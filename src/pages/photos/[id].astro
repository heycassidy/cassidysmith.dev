---
import { css } from '@styled-system/css'
import { render, getCollection, type CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'

import { entryIsPublished } from '@utils/index'
import { photoPath, photosPath } from 'astro-path-helpers/generated'

import AppLayout from '@layouts/AppLayout.astro'
import Button from '@components/Button.astro'
import SEOTags from '@components/SEOTags.astro'
import GrainyBackground from '@components/GrainyBackground.astro'

interface Props {
  photo: CollectionEntry<'photos'>
}

const { photo } = Astro.props
const aspectRatio = photo.data.image.width / photo.data.image.height
const isPortrait = aspectRatio <= 1

const photos = await getCollection('photos', entryIsPublished)
const photoSlugs = photos.map((photo) => photo.id)
const previousPhotoSlug =
  photoSlugs[
    (photoSlugs.indexOf(photo.id) - 1 + photoSlugs.length) % photoSlugs.length
  ]
const nextPhotoSlug =
  photoSlugs[(photoSlugs.indexOf(photo.id) + 1) % photoSlugs.length]

export async function getStaticPaths() {
  const photos = await getCollection('photos', entryIsPublished)

  return photos.map((photo) => ({
    params: { id: photo.id },
    props: { photo },
  }))
}
---

<AppLayout>
  <SEOTags
    slot="head"
    title={`${photo.data.title} â€” Photo by Cassidy Smith`}
    titleTemplate={null}
    description={`A detailed view of a photo from my photography collection, this one titled ${photo.data.title}`}
  />

  <div
    class={css({
      display: 'grid',
      minHeight: '100dvh',
      gridTemplateRows: 'auto 1fr',

      '@media (min-aspect-ratio: 1)': {
        alignItems: 'stretch',
        gridTemplateRows: '1fr',
        gridTemplateColumns: '1fr 1fr',
      },
    })}
  >
    <div
      class={css({
        background: 'stark.background',
        padding: 'bento.padding',
        display: 'flex',
        alignItems: 'center',
        '@media (min-aspect-ratio: 1)': {
          maxHeight: '100dvh',
          justifyContent: 'flex-end',
        },
      })}
    >
      <div
        style={`--aspect-ratio: ${aspectRatio};`}
        class={css({
          position: 'relative',
          zIndex: '2', // This puts it above the grain effect
          width: isPortrait ? 'auto' : '100%',
          height: isPortrait ? '100%' : 'auto',
          maxHeight: 'fit-content',
          overflow: 'hidden',
          '@media (min-aspect-ratio: 1)': {
            aspectRatio: 'var(--aspect-ratio)',
          },
          _light: {
            backgroundColor: 'neutral.50',
          },
          _dark: {
            backgroundColor: 'neutral.875',
          },
        })}
      >
        <Image
          priority
          quality="medium"
          src={photo.data.image}
          alt={photo.data.imageAlt}
          transition:name={`photo-${photo.id}`}
        />
      </div>
    </div>
    <div
      class={css({
        position: 'relative',
        display: 'grid',
        gridTemplateRows: 'auto 1fr',

        // view transition name and background so that photos slide from behind
        viewTransitionName: 'photo-slide-content',
        backgroundColor: 'base.background',

        zIndex: 2,

        '@media (min-aspect-ratio: 1)': {
          boxShadow:
            'calc(-1 * {spacing.columnRule}) 0 0 0 {colors.columnRule}',
        },
      })}
    >
      <div
        class={css({
          width: '100%',
          display: 'flex',
          gap: 'columnRule',
          backgroundColor: 'columnRule',
          paddingBlockEnd: 'columnRule',
          paddingBlockStart: 'columnHeaderBar',
          flexWrap: 'wrap',
        })}
      >
        <Button
          class={css({
            marginRight: 'auto',
          })}
          as="a"
          size="sm"
          href={photosPath()}
          iconLeft="ri:grid-fill"
        >
          All photos
        </Button>
        <!-- filler span -->
        <span
          class={css({
            flexGrow: 1,
            backgroundColor: 'base.background',
            borderRadius: 'calc({radii.bento} - {spacing.bento.padding} / 2)',
          })}></span>
        {
          previousPhotoSlug && (
            <Button
              as="a"
              size="sm"
              href={photoPath(previousPhotoSlug)}
              data-direction="previous-photo"
              iconLeft="ri:skip-left-fill"
            >
              Previous
            </Button>
          )
        }
        {
          nextPhotoSlug && (
            <Button
              class="photo-controls-button photo-controls-button--next"
              as="a"
              size="sm"
              href={photoPath(nextPhotoSlug)}
              data-direction="next-photo"
              iconRight="ri:skip-right-fill"
            >
              Next
            </Button>
          )
        }
      </div>

      <main
        class={css({
          width: '100%',
          textWrap: 'pretty',
          padding: 'bento.padding',
          borderBlockEnd: '{spacing.columnHeaderBar} solid {colors.columnRule}',

          display: 'flex',
          alignItems: 'center',

          '@media (min-aspect-ratio: 1)': {
            maxWidth: '3xl',
          },
        })}
      >
        <div>
          <h1
            class={css({
              textStyle: 'h1',
              marginBlockStart: 0,
            })}
          >
            {photo.data.title}
          </h1>
        </div>
      </main>

      <GrainyBackground />
    </div>
  </div>
</AppLayout>
