---
import { css } from '@styled-system/css'
import { render, getCollection, type CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import { entryIsPublished, sortByPosition } from '@utils/index'
import { photoPath, photosPath } from 'astro-path-helpers/generated'

import AppLayout from '@layouts/AppLayout.astro'
import Button from '@components/Button.astro'
import SEOTags from '@components/SEOTags.astro'
import GrainyBackground from '@components/GrainyBackground.astro'

import A from '@components/mdx/A.astro'

interface Props {
  photo: CollectionEntry<'photos'>
}

// For this page
const { photo } = Astro.props
const { Content } = await render(photo)
const aspectRatio = photo.data.image.src.width / photo.data.image.src.height
const isPortrait = aspectRatio <= 1

const components = {
  a: A,
}

// For the previous/next/all buttons
const photos = await getCollection('photos', entryIsPublished)
const sortedPhotoSlugs = photos.sort(sortByPosition).map((photo) => photo.id)
const previousPhotoSlug =
  sortedPhotoSlugs[
    (sortedPhotoSlugs.indexOf(photo.id) - 1 + sortedPhotoSlugs.length) %
      sortedPhotoSlugs.length
  ]
const nextPhotoSlug =
  sortedPhotoSlugs[
    (sortedPhotoSlugs.indexOf(photo.id) + 1) % sortedPhotoSlugs.length
  ]

export async function getStaticPaths() {
  const photos = await getCollection('photos', entryIsPublished)

  return photos.map((photo) => ({
    params: { id: photo.id },
    props: { photo },
  }))
}
---

<AppLayout>
  <SEOTags
    slot="head"
    title={`${photo.data.title} â€” Photo by Cassidy Smith`}
    titleTemplate={null}
    description={`A detailed view of a photo from my photography collection, this one titled ${photo.data.title}`}
  />

  <div
    class={css({
      display: 'grid',
      minHeight: '100dvh',
      gridTemplateRows: 'auto 1fr',

      '@media (min-aspect-ratio: 1)': {
        alignItems: 'stretch',
        gridTemplateRows: '1fr',
        gridTemplateColumns: '1fr 1fr',
      },
    })}
  >
    <div
      class={css({
        background: 'stark.background',
        padding: 'bento.padding',
        display: 'flex',
        alignItems: 'center',
        '@media (min-aspect-ratio: 1)': {
          maxHeight: '100dvh',
          justifyContent: 'flex-end',
        },
      })}
    >
      <div
        style={`--aspect-ratio: ${aspectRatio};`}
        class={css({
          position: 'relative',
          zIndex: '2', // This puts it above the grain effect
          width: isPortrait ? 'auto' : '100%',
          height: isPortrait ? '100%' : 'auto',
          maxHeight: 'fit-content',
          borderRadius: 'xs',
          overflow: 'hidden',
          aspectRatio: 'var(--aspect-ratio)',
          _light: {
            backgroundColor: 'neutral.50',
          },
          _dark: {
            backgroundColor: 'neutral.875',
          },
        })}
      >
        <Image
          loading="eager"
          src={photo.data.image.src}
          alt={photo.data.image.description}
          quality={70}
          transition:name={`photo-${photo.id}`}
        />
      </div>
    </div>
    <div
      class={css({
        position: 'relative',
        padding: 'bento.padding',
        display: 'grid',
        gap: 'bento.gap',
        gridTemplateRows: 'auto 1fr',

        // view transition name and background so that photos slide from behind
        viewTransitionName: 'photo-slide-content',
        backgroundColor: 'base.background',
        zIndex: 2,

        '@media (min-aspect-ratio: 1)': {
          alignItems: 'center',
        },
      })}
    >
      <div
        class={css({
          width: '100%',
          display: 'flex',
          gap: '2',
          flexWrap: 'wrap',
        })}
      >
        <Button
          class={css({
            marginRight: 'auto',
          })}
          as="a"
          size="sm"
          href={photosPath()}
          iconLeft="ri:grid-fill"
        >
          All photos
        </Button>
        <div
          class={css({
            display: 'flex',
            gap: '2',
          })}
        >
          {
            previousPhotoSlug && (
              <Button
                as="a"
                size="sm"
                href={photoPath(previousPhotoSlug)}
                data-direction="previous-photo"
                iconLeft="ri:skip-left-fill"
              >
                Previous
              </Button>
            )
          }
          {
            nextPhotoSlug && (
              <Button
                class="photo-controls-button photo-controls-button--next"
                as="a"
                size="sm"
                href={photoPath(nextPhotoSlug)}
                data-direction="next-photo"
                iconRight="ri:skip-right-fill"
              >
                Next
              </Button>
            )
          }
        </div>
      </div>

      <main
        class={css({
          width: '100%',
          textWrap: 'pretty',
          '@media (min-aspect-ratio: 1)': {
            maxWidth: '3xl',
            justifySelf: 'center',
          },
        })}
      >
        <h1
          class={css({
            textStyle: 'h1',
            marginBlockStart: 0,
          })}
        >
          {photo.data.title}
        </h1>
        <Content components={components} />
      </main>

      <GrainyBackground />
    </div>
  </div>
</AppLayout>
