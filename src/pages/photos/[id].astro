---
import { render, getCollection, type CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import { entryIsPublished, sortByPosition } from '@utils/index'

import AppLayout from '@layouts/AppLayout.astro'
import Button from '@components/Button.astro'
import Prose from '@components/Prose.astro'
import SEOTags from '@components/SEOTags.astro'
import GrainyBackground from '@components/GrainyBackground.astro'

interface Props {
  photo: CollectionEntry<'photos'>
}

// For this page
const { photo } = Astro.props
const { Content } = await render(photo)
const aspectRatio = photo.data.image.src.width / photo.data.image.src.height
const orientation = aspectRatio > 1 ? 'landscape' : 'portrait'

// For the previous/next/all buttons
const photos = await getCollection('photos', entryIsPublished)
const sortedPhotoSlugs = photos.sort(sortByPosition).map((photo) => photo.id)
const previousPhotoSlug =
  sortedPhotoSlugs[
    (sortedPhotoSlugs.indexOf(photo.id) - 1 + sortedPhotoSlugs.length) %
      sortedPhotoSlugs.length
  ]
const nextPhotoSlug =
  sortedPhotoSlugs[
    (sortedPhotoSlugs.indexOf(photo.id) + 1) % sortedPhotoSlugs.length
  ]

export async function getStaticPaths() {
  const photos = await getCollection('photos', entryIsPublished)

  return photos.map((photo) => ({
    params: { id: photo.id },
    props: { photo },
  }))
}
---

<AppLayout>
  <SEOTags
    slot="head"
    title={`${photo.data.title} â€” Photo by Cassidy Smith`}
    titleTemplate={null}
    description={`A detailed view of a photo from my photography collection, this one titled ${photo.data.title}`}
  />

  <div class="photo-page-layout">
    <div class="photo-page-layout__image">
      <div class=`image-container image-container--${orientation}`>
        <Image
          loading="eager"
          src={photo.data.image.src}
          alt={photo.data.image.description}
          width="700"
          quality={70}
          widths={[400, 800, orientation === 'landscape' ? 920 * 2 : 800 * 2]}
          transition:name={`photo-${photo.id}`}
        />
      </div>
    </div>
    <div class="photo-page-layout__description-and-controls">
      <div class="photo-controls">
        <Button
          class="photo-controls-button photo-controls-button--all"
          as="a"
          size="small"
          href="/photos"
        >
          <Icon name="ri:grid-fill" /> All photos
        </Button>
        <div class="photo-controls-nav">
          {
            previousPhotoSlug && (
              <Button
                class="photo-controls-button photo-controls-button--previous"
                as="a"
                size="small"
                href={`/photos/${previousPhotoSlug}`}
                data-direction="previous-photo"
              >
                <Icon name="ri:skip-left-fill" /> Previous
              </Button>
            )
          }
          {
            nextPhotoSlug && (
              <Button
                class="photo-controls-button photo-controls-button--next"
                as="a"
                size="small"
                href={`/photos/${nextPhotoSlug}`}
                data-direction="next-photo"
              >
                Next <Icon name="ri:skip-right-fill" />
              </Button>
            )
          }
        </div>
      </div>

      <Prose as="main" class="photo-description">
        <h1>{photo.data.title}</h1>
        <Content class="photo-content" />
      </Prose>

      <GrainyBackground />
    </div>
  </div>
</AppLayout>

<style lang="scss" define:vars={{ 'aspect-ratio': aspectRatio }}>
  @use '@styles/mixins';

  .photo-page-layout {
    display: grid;
    min-height: 100dvh;
    grid-template-rows: auto 1fr;

    @media (min-aspect-ratio: 1) {
      align-items: stretch;
      grid-template-rows: 1fr;
      grid-template-columns: 1fr 1fr;
    }
  }

  @include mixins.color-mode(light) {
    .photo-page-layout__image {
      --photo-padding: var(--fluid-bento-padding);
    }
  }
  @include mixins.color-mode(dark) {
    .photo-page-layout__image {
      --photo-padding: calc(var(--fluid-bento-padding) * 2);
    }
  }

  .photo-page-layout__image {
    background: var(--color-stark-background);
    padding: var(--photo-padding);
    display: flex;
    align-items: center;
    @media (min-aspect-ratio: 1) {
      max-height: 100dvh;
      justify-content: flex-end;
    }
  }
  .photo-page-layout__description-and-controls {
    position: relative;
    padding: var(--fluid-bento-padding);
    display: grid;
    gap: var(--fluid-bento-gap);
    grid-template-rows: auto 1fr;
    background-color: var(--color-base-background);

    view-transition-name: photo-slide-content;

    @media (min-aspect-ratio: 1) {
      align-items: center;
    }
  }

  .photo-controls {
    width: 100%;
    display: flex;
    gap: var(--space-2);
    flex-wrap: wrap;

    .photo-controls-button--all {
      margin-right: auto;
    }
  }
  .photo-controls-nav {
    display: flex;
    gap: var(--space-2);
  }

  .image-container {
    position: relative;
    background-color: var(--color-base-background);
    width: 100%;
    height: auto;
    border-radius: var(--radius-tiny);
    overflow: hidden;

    aspect-ratio: var(--aspect-ratio);

    // Screen aspect ratio
    @media (min-aspect-ratio: 1) {
      // Image aspect ratio
      &--portrait {
        max-height: 100%;
        width: auto;
      }
    }

    img {
      display: block;
      width: 100%;
      height: auto;
      // view-transition-name: photo-slide;
    }
  }

  .photo-description {
    width: 100%;
    @media (min-aspect-ratio: 1) {
      max-width: var(--space-content-3);
      justify-self: center;
    }

    :global(a) {
      @include mixins.text-link;
    }
  }

  .photo-controls-button {
    text-wrap: nowrap;
  }
</style>
