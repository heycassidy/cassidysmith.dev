---
import PhotoGalleryItem from './PhotoGalleryItem.astro'

import type { CollectionEntry } from 'astro:content'
interface Props {
  photos: CollectionEntry<'photos'>[]
}

const { photos } = Astro.props
---

<div class="gallery-outer">
  <ul class="gallery">
    {photos.map((photo) => <PhotoGalleryItem photo={photo} />)}
  </ul>
</div>

<script>
  import {
    TRANSITION_AFTER_SWAP,
    TRANSITION_BEFORE_PREPARATION,
    isTransitionBeforePreparationEvent,
  } from 'astro:transitions/client'

  const scrollSessionKey = `photo-gallery-scroll`
  let direction = ''

  if (history.scrollRestoration) {
    history.scrollRestoration = 'manual'
  }

  document.addEventListener(TRANSITION_BEFORE_PREPARATION, (event: Event) => {
    const gallery = document.querySelector('.gallery')
    const documentScrollingElement = document.scrollingElement

    if (isTransitionBeforePreparationEvent(event)) {
      direction = event.direction
    }

    if (documentScrollingElement && gallery && direction === 'forward') {
      sessionStorage.setItem(
        scrollSessionKey,
        JSON.stringify({
          left: gallery.scrollLeft,
          top: documentScrollingElement.scrollTop,
        })
      )
    }
  })

  document.addEventListener(TRANSITION_AFTER_SWAP, () => {
    const gallery = document.querySelector('.gallery')
    const documentScrollingElement = document.scrollingElement

    if (documentScrollingElement && gallery && direction === 'back') {
      const scrollPosition = JSON.parse(
        sessionStorage.getItem(scrollSessionKey) || ''
      )

      gallery.scrollTo({ left: scrollPosition })
      documentScrollingElement.scrollTop = scrollPosition.top
      sessionStorage.removeItem(scrollSessionKey)
    }
  })
</script>

<style lang="scss">
  @import '../styles/mixins.scss';

  .gallery-outer {
    grid-column-start: full-width-start;
    grid-column-end: full-width-end;
    background-color: var(--color-stark-background);
  }

  .gallery {
    list-style: none;
    max-width: var(--layout-size-3);
    margin: 0 auto;
    padding: var(--fluid-bento-padding);
    display: flex;
    gap: var(--fluid-bento-gap);
    width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;

    @include breakpoint-small {
      overflow: visible;
      display: grid;
      padding: calc(var(--fluid-bento-padding) + var(--fluid-bento-gap)) 0;
      grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
    }
  }
</style>
