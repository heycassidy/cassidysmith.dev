---
import type { HTMLAttributes } from 'astro/types'
import Button from '@components/Button.astro'
import { Icon } from 'astro-icon/components'

interface Props {
  textToCopy: string
  initialLabel?: string
  successLabel?: string
  iconName?: string
  size?: 'sm' | 'md' | 'lg'
  color?: string
  class?: string
}

const {
  textToCopy,
  initialLabel = 'Copy',
  successLabel = 'Copied',
  size,
  color,
  class: className,
  ...props
} = Astro.props
---

<copy-button data-text-to-copy={textToCopy} {...props}>
  <Button
    color={color}
    size={size}
    iconRight="ri:clipboard-fill"
    class={className}
  >
    {initialLabel}
  </Button>
  <template id="copied"
    >{successLabel} <Icon aria-hidden="true" name="ri:check-line" /></template
  >
</copy-button>

<script>
  class CopyButton extends HTMLElement {
    static get observedAttributes() {
      return ['copied']
    }

    resetTimeout: NodeJS.Timeout | null
    textToCopy: string
    readyHTML: string
    copiedHTML: string
    button?: HTMLButtonElement | null

    constructor() {
      super()

      this.readyHTML = ''
      this.copiedHTML = ''

      this.textToCopy = this.dataset.textToCopy ?? ''
      this.resetTimeout = null
    }

    connectedCallback() {
      this.button = this.querySelector('button')

      this.readyHTML = this.button?.innerHTML ?? ''
      this.copiedHTML = this.querySelector('#copied')?.innerHTML ?? ''

      this.button?.addEventListener('click', this.copy.bind(this))
    }

    disconnectedCallback() {
      this.reset()
    }

    attributeChangedCallback(name: string, oldValue: any, newValue: any) {
      if (name === 'copied' && this.button) {
        this.button.innerHTML =
          newValue === null ? this.readyHTML : this.copiedHTML
      }
    }

    copy() {
      navigator.clipboard.writeText(this.textToCopy)
      this.copied = true
      this.resetTimeout = setTimeout(this.reset.bind(this), 5000)
    }

    reset() {
      this.copied = false

      if (this.resetTimeout) {
        clearTimeout(this.resetTimeout)
      }
    }

    get copied() {
      return this.hasAttribute('copied')
    }

    set copied(v) {
      this.toggleAttribute('copied', v)
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define('copy-button', CopyButton)
</script>
